require "types"
require "test"

assert_equal(true, true)
assert_not_equal(true, false)
assert_not_equal(5, 4)
assert_equal(5, 5)
assert_not_equal("foo", Symbol "foo")
assert_not_equal(Symbol "foo", Symbol "bar")
assert_equal(Symbol "foo", Symbol "foo")
assert_equal(List:null(), List:null())
assert_equal(List:from { 1 }, List:from { 1 })
assert_equal(List:from { 1, 2, 3 }, List:from { 1, 2, 3 })
assert_not_equal(List:from { 1, 2, 3 }, List:from { 1, 2 })
assert_not_equal(List:from { 1, 2 }, List:from { 1, 2, 3 })
assert_equal(List:from { List:null() }, List:from { List:null() })
assert_equal(List:from { List:from { 1, 2, 3 } }, List:from { List:from { 1, 2, 3 } })
assert_not_equal(List:from { List:from { 1, 2, 3 } }, List:from { List:from { 1, 2 } })
assert_not_equal(List:from { List:from { 1, 2 } }, List:from { List:from { 1, 2, 3 } })
assert_not_equal(List:from { 1, 2, 3 }, List:from { 1, "2", 3 })
assert_not_equal(List:from { 1, 2, 3 }, List:from { 1, 2, 100 })
assert_equal(Quote(List:null()), Quote(List:null()))
assert_not_equal(Quote(List:null()), Quote(List:from { 1, 2, 3 }))
assert_equal(Quote(1), Quote(1))
assert_equal((List:from { 2, 3 }):add(1), List:from { 1, 2, 3 })

-- This works thanks to metamethods.
-- See: http://www.lua.org/manual/5.4/manual.html#2.4
assert(Quote "x" == Quote "x")
assert(Quote "x" ~= Quote "y")
assert(Symbol "x" == Symbol "x")
assert(Symbol "x" ~= Symbol "y")
assert(List:null() == List:null())
assert(List:from { 1, 2, 3 } == List:from { 1, 2, 3 })
assert(List:from { 1, 2, 3 } ~= List:from { 1, 2 })
assert(List:from { 1, 2 } ~= List:from { 1, 2, 3 })
assert(List:from { 1, List:from { 2, 3 } } == List:from { 1, List:from { 2, 3 } })
assert(List:from { 1, List:from { 2, 3 } } ~= List:from { 1, List:from { 2, 3, 4 } })
assert(List:from { 1, List:from { 2, 3, 4 } } ~= List:from { 1, List:from { 2, 3 } })
